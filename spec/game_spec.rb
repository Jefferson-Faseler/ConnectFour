require_relative "../game"
require_relative "../board"

describe Game do
  let(:game) { Game.new }
  let(:board) { Board.new }

  describe "game turn" do
    it "is readable" do
      expect(game.turn).to eq('ðŸ”´')
    end

    it "changes to other player" do
      game.change_turn
      expect(game.turn).to eq('âšª')
    end
  end

  describe "checks board for winner" do

    it "detects four in a row" do
      4.times do |i|
        x = i + 1
        board.place('âšª', x)
      end
      expect(game.four_in_row(board.display, 'âšª')).to eq true
    end

    it "returns false if not four in a row" do
      expect(game.four_in_row(board.display, 'âšª')).to eq false
    end

    describe "returns true or false for different types of four in row" do

      describe "horizontal" do

        it "returns false for no matches" do
          expect(game.winner?(board, 'ðŸ”´')).to eq false
        end

        it "returns true for a match" do
          4.times do |i|
            x = i + 1
            board.place('ðŸ”´', x)
          end
          expect(game.winner?(board, 'ðŸ”´')).to eq true
          expect(game.winner?(board, 'âšª')).to eq false
        end

      end

      describe "vertical" do

        it "returns false for no matches" do
          expect(game.winner?(board, 'âšª')).to eq false
        end

        it "returns true for a vertical match" do
          4.times do |i|
            x = 2
            board.place('âšª', x)
          end
          expect(game.winner?(board, 'âšª')).to eq true
          expect(game.winner?(board, 'ðŸ”´')).to eq false
        end

      end

      describe "right diagonal /" do

        it "returns false for no matches" do
          expect(game.winner?(board, 'ðŸ”´')).to eq false
        end

        it "returns true for a right diagonal match" do
          board.place('ðŸ”´', 1)

          board.place('âšª', 2)
          board.place('ðŸ”´', 2)

          board.place('âšª', 3)
          board.place('âšª', 3)
          board.place('ðŸ”´', 3)

          board.place('âšª', 4)
          board.place('âšª', 4)
          board.place('âšª', 4)
          board.place('ðŸ”´', 4)

          # ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"]
          # ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"]
          # ["âš«", "âš«", "âš«", "ðŸ”´", "âš«", "âš«", "âš«"]
          # ["âš«", "âš«", "ðŸ”´", "âšª", "âš«", "âš«", "âš«"]
          # ["âš«", "ðŸ”´", "âšª", "âšª", "âš«", "âš«", "âš«"]
          # ["ðŸ”´", "âšª", "âšª", "âšª", "âš«", "âš«", "âš«"]

          expect(game.winner?(board, 'âšª')).to eq false
          expect(game.winner?(board, 'ðŸ”´')).to eq true
        end
      end

      describe "left diagonal \\" do

        it "returns false for no matches" do
          expect(game.winner?(board, 'ðŸ”´')).to eq false
        end

        it "returns true for a left diagonal match" do
          board.place('âšª', 1)
          board.place('âšª', 1)
          board.place('âšª', 1)
          board.place('ðŸ”´', 1)

          board.place('âšª', 2)
          board.place('âšª', 2)
          board.place('ðŸ”´', 2)

          board.place('âšª', 3)
          board.place('ðŸ”´', 3)

          board.place('ðŸ”´', 4)

          # ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"]
          # ["âš«", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"]
          # ["ðŸ”´", "âš«", "âš«", "âš«", "âš«", "âš«", "âš«"]
          # ["âšª", "ðŸ”´", "âš«", "âš«", "âš«", "âš«", "âš«"]
          # ["âšª", "âšª", "ðŸ”´", "âš«", "âš«", "âš«", "âš«"]
          # ["âšª", "âšª", "âšª", "ðŸ”´", "âš«", "âš«", "âš«"]

          expect(game.winner?(board, 'âšª')).to eq false
          expect(game.winner?(board, 'ðŸ”´')).to eq true
        end
      end


    end

  end

end
